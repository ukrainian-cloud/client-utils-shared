{"version":3,"sources":["../src/@utility.ts","../src/@initializable.ts","../src/utils/local-db.ts","../src/utils/color-scheme.ts"],"sourcesContent":["import { Initializable } from './@initializable';\n\nconst utility = Symbol();\n\nconst utilityStore = new WeakMap<any, any>();\n\nlet isLoaded = false;\n\ninterface Utility<T extends Initializable, U extends Initializable> {\n\timplements: abstract new (...args: any[]) => T;\n\timplementation: new (...args: any[]) => U;\n}\n\nexport function isUtility(obj: any): obj is Utility<Initializable, Initializable> {\n\treturn Boolean(obj?.[utility]);\n}\n\nexport function createUtility<T extends Initializable, U extends Initializable>(\n\timplementsClass: abstract new (...args: any[]) => T,\n\timplementationClass: new (...args: any[]) => U,\n) {\n\treturn {\n\t\t[utility]: true,\n\t\timplements: implementsClass,\n\t\timplementation: implementationClass,\n\t} as Utility<T, U>;\n}\n\nexport async function loadUtilities(...utilities: Utility<Initializable, Initializable>[]) {\n\tconst promises: Promise<Initializable>[] = [];\n\tfor (const utility of utilities) {\n\t\tconst util = new utility.implementation();\n\t\tconst promise = util.init().then(() => {\n\t\t\tutilityStore.set(utility.implements, util);\n\t\t\treturn util;\n\t\t});\n\t\tpromises.push(promise);\n\t\tutilityStore.set(utility.implements, promise);\n\t}\n\tawait Promise.all(promises);\n\tisLoaded = true;\n}\n\nexport async function getUtility<T>(target: abstract new (...args: any[]) => T): Promise<T> {\n\treturn await Promise.resolve(utilityStore.get(target));\n}\n\nexport function useUtil<T>(target: abstract new (...args: any[]) => T): T {\n\tif (!isLoaded) throw new Error(\"Can't call useUtil hook before utilities fully loaded\");\n\treturn utilityStore.get(target);\n}\n","export abstract class Initializable {\n\tabstract init(): Promise<void>;\n}\n","import { Initializable } from \"../@initializable\";\n\nenum Theme {\n\tdark = \"dark\",\n\tlight = \"light\",\n}\n\ninterface Mappings {\n\ttheme: Theme;\n}\n\nexport abstract class LocalDB extends Initializable {\n\tprivate changeListeners: Record<string, Set<(value: any) => void>> = {};\n\tprivate options: Record<string, WeakMap<(value: any) => void, { once?: boolean }>> = {};\n\n\tenums = {\n\t\tTheme,\n\t};\n\n\tabstract get<T extends keyof Mappings>(name: T): Promise<Mappings[T]>;\n\n\tabstract set<T extends keyof Mappings>(name: T, value: Mappings[T]): Promise<void>;\n\n\tabstract delete<T extends keyof Mappings>(name: T): Promise<void>;\n\n\tprotected emitChange(name: string, value: any) {\n\t\tif (!this.changeListeners[name]) return;\n\t\tthis.changeListeners[name].forEach((callback) => {\n\t\t\tconst { once } = this.options[name].get(callback)!;\n\t\t\tif (once) {\n\t\t\t\tthis.changeListeners[name].delete(callback);\n\t\t\t\tthis.options[name].delete(callback);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcallback(value);\n\t\t\t} catch(e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tonChange<T extends keyof Mappings>(name: T, callback: (value: Mappings[T]) => void, options?: { once?: boolean }) {\n\t\tthis.changeListeners[name] ??= new Set();\n\t\tthis.options[name] ??= new WeakMap();\n\t\tthis.changeListeners[name].add(callback);\n\t\tthis.options[name].set(callback, options || {});\n\t};\n\n\toffChange<T extends keyof Mappings>(name: T, callback: (value: Mappings[T]) => void) {\n\t\tif (!this.changeListeners[name]) return;\n\t\tthis.changeListeners[name].delete(callback);\n\t\tthis.options[name].delete(callback);\n\t};\n}\n","import { Initializable } from '../@initializable';\nimport { getUtility } from '../@utility';\nimport { LocalDB } from './local-db';\n\ntype Theme = LocalDB['enums']['Theme'][keyof LocalDB['enums']['Theme']];\n\nexport abstract class ColorScheme extends Initializable {\n\tabstract getDefault(): Promise<Theme>;\n\n\tasync init() {\n\t\tconst db = await getUtility(LocalDB);\n\t\ttry {\n\t\t\tawait db.get('theme');\n\t\t} catch(e) {\n\t\t\tawait db.set('theme', await this.getDefault());\n\t\t}\n\t}\n}\n"],"mappings":";AAEA,IAAM,UAAU,OAAO;AAEvB,IAAM,eAAe,oBAAI,QAAkB;AAE3C,IAAI,WAAW;AAOR,SAAS,UAAU,KAAwD;AACjF,SAAO,QAAQ,2BAAM,QAAQ;AAC9B;AAEO,SAAS,cACf,iBACA,qBACC;AACD,SAAO;AAAA,IACN,CAAC,OAAO,GAAG;AAAA,IACX,YAAY;AAAA,IACZ,gBAAgB;AAAA,EACjB;AACD;AAEA,eAAsB,iBAAiB,WAAoD;AAC1F,QAAM,WAAqC,CAAC;AAC5C,aAAWA,YAAW,WAAW;AAChC,UAAM,OAAO,IAAIA,SAAQ,eAAe;AACxC,UAAM,UAAU,KAAK,KAAK,EAAE,KAAK,MAAM;AACtC,mBAAa,IAAIA,SAAQ,YAAY,IAAI;AACzC,aAAO;AAAA,IACR,CAAC;AACD,aAAS,KAAK,OAAO;AACrB,iBAAa,IAAIA,SAAQ,YAAY,OAAO;AAAA,EAC7C;AACA,QAAM,QAAQ,IAAI,QAAQ;AAC1B,aAAW;AACZ;AAEA,eAAsB,WAAc,QAAwD;AAC3F,SAAO,MAAM,QAAQ,QAAQ,aAAa,IAAI,MAAM,CAAC;AACtD;AAEO,SAAS,QAAW,QAA+C;AACzE,MAAI,CAAC;AAAU,UAAM,IAAI,MAAM,uDAAuD;AACtF,SAAO,aAAa,IAAI,MAAM;AAC/B;;;AClDO,IAAe,gBAAf,MAA6B;AAEpC;;;ACAA,IAAK,QAAL,kBAAKC,WAAL;AACC,EAAAA,OAAA,UAAO;AACP,EAAAA,OAAA,WAAQ;AAFJ,SAAAA;AAAA,GAAA;AASE,IAAe,UAAf,cAA+B,cAAc;AAAA,EAA7C;AAAA;AACN,SAAQ,kBAA6D,CAAC;AACtE,SAAQ,UAA6E,CAAC;AAEtF,iBAAQ;AAAA,MACP;AAAA,IACD;AAAA;AAAA,EAQU,WAAW,MAAc,OAAY;AAC9C,QAAI,CAAC,KAAK,gBAAgB,IAAI;AAAG;AACjC,SAAK,gBAAgB,IAAI,EAAE,QAAQ,CAAC,aAAa;AAChD,YAAM,EAAE,KAAK,IAAI,KAAK,QAAQ,IAAI,EAAE,IAAI,QAAQ;AAChD,UAAI,MAAM;AACT,aAAK,gBAAgB,IAAI,EAAE,OAAO,QAAQ;AAC1C,aAAK,QAAQ,IAAI,EAAE,OAAO,QAAQ;AAAA,MACnC;AACA,UAAI;AACH,iBAAS,KAAK;AAAA,MACf,SAAQ,GAAN;AACD,gBAAQ,MAAM,CAAC;AAAA,MAChB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,SAAmC,MAAS,UAAwC,SAA8B;AAzCnH;AA0CE,eAAK,iBAAL,qBAA+B,oBAAI,IAAI;AACvC,eAAK,SAAL,qBAAuB,oBAAI,QAAQ;AACnC,SAAK,gBAAgB,IAAI,EAAE,IAAI,QAAQ;AACvC,SAAK,QAAQ,IAAI,EAAE,IAAI,UAAU,WAAW,CAAC,CAAC;AAAA,EAC/C;AAAA,EAEA,UAAoC,MAAS,UAAwC;AACpF,QAAI,CAAC,KAAK,gBAAgB,IAAI;AAAG;AACjC,SAAK,gBAAgB,IAAI,EAAE,OAAO,QAAQ;AAC1C,SAAK,QAAQ,IAAI,EAAE,OAAO,QAAQ;AAAA,EACnC;AACD;;;AC/CO,IAAe,cAAf,cAAmC,cAAc;AAAA,EAGvD,MAAM,OAAO;AACZ,UAAM,KAAK,MAAM,WAAW,OAAO;AACnC,QAAI;AACH,YAAM,GAAG,IAAI,OAAO;AAAA,IACrB,SAAQ,GAAN;AACD,YAAM,GAAG,IAAI,SAAS,MAAM,KAAK,WAAW,CAAC;AAAA,IAC9C;AAAA,EACD;AACD;","names":["utility","Theme"]}